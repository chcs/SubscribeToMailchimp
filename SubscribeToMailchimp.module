<?php
class SubscribeToMailchimp extends WireData implements Module, ConfigurableModule {

    static function getModuleInfo() {
        return [
            'title'   => 'Subscribe to Mailchimp',
            'summary' => 'Subscribe, update, unsubscribe or delete a user in your Mailchimp mailing list.',
            'version' => '0.0.3',
            'author'  => 'danielstieber',
            'href'    => 'https://github.com/danielstieber/SubscribeToMailchimp',
            'icon'    => 'address-card',
            'autoload'=> false,
            'singular'=> false
        ];
    }
    const WARNING_VALIDATION = "A user managed to send a form without an email address. Please check your form validation! A server-sided validation (e.g. via Valitron) is strongly recommended.";

    static public function getDefaults() {
        return array(
            "double_opt_in" => "checked",
        );
    }
    private function getApiBase($list) {
        $dc = explode('-',$this->api_key)[1]; // get the datacenter code from the api key, to use it in the api url
        return "https://".$dc.".api.mailchimp.com/3.0/lists/".$list."/members/";
    }
    public function subscribe($email, array $data = [], $list = "") {
        $param = [];
        if(empty($list)) // use default list from module settings, if no list is provided
            $list = $this->default_list;
        if(isset($email)) {
            $api = $this->getApiBase($list); // get the api path
            $param['email_address'] = $email;
            foreach ($data as $k => $v) {
                if(!empty(trim($v))) { // avoid to override data of existing leads with empty field values
                    $param['merge_fields'][$k] = $v;
                }
            }
            $http = new WireHttp();
            $http->setHeaders([
                'Content-Type' => 'application/json',
                'Authorization' => 'Basic '.base64_encode('user:'.$this->api_key),
            ]);
            $status = $this->getStatus($email, $list); // get the current subscription status of the user
            if($status !== false) {
                if ($status == 'unsubscribed')
                    $param['status'] = 'pending';
                $response = $http->send($api . md5($email), json_encode($param), 'PATCH');
            } else {
                if($this->double_opt_in)
                    $param['status'] = 'pending';
                else
                    $param['status'] = 'subscribed';
                $response = $http->send($api, json_encode($param), 'POST');
            }
            if($response !== false) {
                return true;
            } else {
                $this->warning("Mailchimp request subscribe() not successful: " . $http->getError(), Notice::log); // Log warning in Processwire backend
                return false;
            }
        } else {
            $this->warning(self::WARNING_VALIDATION); // Log warning, if a user is able to send a form without email.
            return false;
        }
    }
    public function unsubscribe($email, $list = "") {
        $param = [];
        if(empty($list)) // use default list from module settings, if no list is provided
            $list = $this->default_list;
        if(isset($email)) {
            $api = $this->getApiBase($list); // get the api path
            $http = new WireHttp();
            $http->setHeaders([
                'Content-Type' => 'application/json',
                'Authorization' => 'Basic '.base64_encode('user:'.$this->api_key),
            ]);
            $param['status'] = 'unsubscribed';
            $response = $http->send($api . md5($email), json_encode($param), 'PATCH'); // update listentry with param 'unsubscribed'
            if($response !== false) {
                return true;
            } else {
                $this->warning("Mailchimp request unsubscribe() not successful: " . $http->getError(), Notice::log); // Log warning in Processwire backend
                return false;
            }
            return true;
        } else {
            $this->warning(self::WARNING_VALIDATION); // Log warning, if a user is able to send a form without email.
            return false;
        }
    }
    public function delete($email, $list = "") {
        if(empty($list)) // use default list from module settings, if no list is provided
            $list = $this->default_list;
        if(isset($email)) {
            $api = $this->getApiBase($list); // get the api path
            $http = new WireHttp();
            $http->setHeaders([
                'Content-Type' => 'application/json',
                'Authorization' => 'Basic '.base64_encode('user:'.$this->api_key),
            ]);
            $response = $http->send($api . md5($email), [], 'DELETE'); // delete entry
            if($response !== false) {
                return true;
            } else {
                $this->warning("Mailchimp request delete() not successful: " . $http->getError(), Notice::log); // Log warning in Processwire backend
                return false;
            }
            return true;
        } else {
            $this->warning(self::WARNING_VALIDATION); // Log warning, if a user is able to send a form without email.
            return false;
        }
    }
    public function getStatus($email, $list = "") {
        $param = [];
        if(empty($list)) // use default list from module settings, if no list is provided
            $list = $this->default_list;
        if(isset($email)) {
            $api = $this->getApiBase($list); // get the api path
            $http = new WireHttp();
            $http->setHeaders([
                'Content-Type' => 'application/json',
                'Authorization' => 'Basic '.base64_encode('user:'.$this->api_key),
            ]);
            $response = $http->get($api . md5($email), json_encode($param)); // get the entry of the given mail adress on the list
            if($response !== false) {
                return json_decode($response)->status; // return the subscription status
            } else {
                $this->warning("Mailchimp request getStatus() not successful: " . $http->getError(), Notice::log); // Log warning in Processwire backend
                return false;
            }
            return true;
        } else {
            $this->warning(self::WARNING_VALIDATION); // Log warning, if a user is able to send a form without email.
            return false;
        }
    }
    public static function getModuleConfigInputfields(array $data)
    {
        $defaults = self::getDefaults();
        $data = array_merge($defaults, $data);

        $wrap = new InputfieldWrapper();
        $form = wire('modules')->get('InputfieldFieldset');
        $form->label = __('Mailchimp Configuration');
        $form->notes = __('Check out the README, if you have troubles to find the data for the fields above.');
        $form->collapsed = Inputfield::collapsedPopulated;
        $inputfields = [
            'api_key' => __('API Key'),
            'default_list' => __('Default list (can be overwritten by every form)'),
        ];
        $checkboxfields = [
            'double_opt_in' => __('Use double opt in. (Recommended)'),
        ];
        foreach($inputfields as $name => $label) {
            $f = wire('modules')->get('InputfieldText');
            $f->attr('name', $name);
            $f->label = $label;
            $f->required = true;
            $f->columnWidth = 50;
            if(isset($data[$name]))
                $f->attr('value', $data[$name]);
            $form->add($f);
        }
        foreach($checkboxfields as $name => $label) {       
            $f = wire('modules')->get("InputfieldCheckbox");
            $f->name = $name;
            $f->label = $label;
            $f->attr('checked', empty($data[$name]) ? '' : 'checked');
            $f->columnWidth = 100;
            $form->add($f);
        }
        $wrap->add($form);   
        return $wrap;
    }
}
?>